

services:
  backend:
    build: .
    command: sh -c "sleep 5 && python manage.py migrate && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./static:/app/static
    depends_on:
      - db
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/" ]
      interval: 30s
      timeout: 10s
      retries: 3


  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    command: redis-server --save 20 1 --loglevel warning
    ports:
      - "6379:6379"

  celery:
    build: .
    command: celery -A config worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - backend


  celery_beat:
    build: .
    command: celery -A config beat --loglevel=info
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - backend

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend


#bash -c "celery -A config worker --beat --loglevel=info"

volumes:
  postgres_data: